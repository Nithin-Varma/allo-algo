{
    "hints": {
        "initialize(account,application,account,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "createPoolWithCustomStrategy(byte[],application,byte[],uint64,string,address[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "createPool(byte[],application,byte[],uint64,string,address[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updatePoolMetadata(uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateRegistry(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateTreasury(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updatePercentFee(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateBaseFee(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addToCloneableStrategies(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "removeFromCloneableStrategies(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addPoolManager(uint64,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "removePoolManager(uint64,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "registerRecipient(uint64,byte[])string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fundPool(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "allocate(uint64,byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "batchAllocate(uint64[],byte[][])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "distribute(uint64,address[],byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getFeeDenominator()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "isPoolAdmin(uint64,account)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "isPoolManager(uint64,account)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getStrategy(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPercentFee()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getBaseFee()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTreasury()byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getRegistry()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "isCloneableStrategy(account)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPool(uint64)(byte[],uint64,string,byte[],byte[])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Pool",
                    "elements": [
                        [
                            "profileId",
                            "byte[]"
                        ],
                        [
                            "strategy",
                            "uint64"
                        ],
                        [
                            "metadata",
                            "string"
                        ],
                        [
                            "managerRole",
                            "byte[]"
                        ],
                        [
                            "adminRole",
                            "byte[]"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuYWxsby5BbGxvLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "_poolIndex": {
                    "type": "uint64",
                    "key": "_poolIndex"
                },
                "baseFee": {
                    "type": "uint64",
                    "key": "baseFee"
                },
                "owner": {
                    "type": "bytes",
                    "key": "owner"
                },
                "percentFee": {
                    "type": "uint64",
                    "key": "percentFee"
                },
                "registry": {
                    "type": "uint64",
                    "key": "registry"
                },
                "treasury": {
                    "type": "bytes",
                    "key": "treasury"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Allo",
        "methods": [
            {
                "name": "initialize",
                "args": [
                    {
                        "type": "account",
                        "name": "owner"
                    },
                    {
                        "type": "application",
                        "name": "registry"
                    },
                    {
                        "type": "account",
                        "name": "treasury"
                    },
                    {
                        "type": "uint64",
                        "name": "percentFee"
                    },
                    {
                        "type": "uint64",
                        "name": "baseFee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "createPoolWithCustomStrategy",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "profileId"
                    },
                    {
                        "type": "application",
                        "name": "strategy"
                    },
                    {
                        "type": "byte[]",
                        "name": "initStrategyData"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    },
                    {
                        "type": "string",
                        "name": "metadata"
                    },
                    {
                        "type": "address[]",
                        "name": "managers"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "createPool",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "profileId"
                    },
                    {
                        "type": "application",
                        "name": "strategy"
                    },
                    {
                        "type": "byte[]",
                        "name": "initStrategyData"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    },
                    {
                        "type": "string",
                        "name": "metadata"
                    },
                    {
                        "type": "address[]",
                        "name": "managers"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "updatePoolMetadata",
                "args": [
                    {
                        "type": "uint64",
                        "name": "poolId"
                    },
                    {
                        "type": "string",
                        "name": "metadata"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updateRegistry",
                "args": [
                    {
                        "type": "application",
                        "name": "registry"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updateTreasury",
                "args": [
                    {
                        "type": "account",
                        "name": "treasury"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updatePercentFee",
                "args": [
                    {
                        "type": "uint64",
                        "name": "percentFee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updateBaseFee",
                "args": [
                    {
                        "type": "uint64",
                        "name": "baseFee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "addToCloneableStrategies",
                "args": [
                    {
                        "type": "account",
                        "name": "strategy"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "removeFromCloneableStrategies",
                "args": [
                    {
                        "type": "account",
                        "name": "strategy"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "addPoolManager",
                "args": [
                    {
                        "type": "uint64",
                        "name": "poolId"
                    },
                    {
                        "type": "account",
                        "name": "manager"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "removePoolManager",
                "args": [
                    {
                        "type": "uint64",
                        "name": "poolId"
                    },
                    {
                        "type": "account",
                        "name": "manager"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "registerRecipient",
                "args": [
                    {
                        "type": "uint64",
                        "name": "poolId"
                    },
                    {
                        "type": "byte[]",
                        "name": "data"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "fundPool",
                "args": [
                    {
                        "type": "uint64",
                        "name": "poolId"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "allocate",
                "args": [
                    {
                        "type": "uint64",
                        "name": "poolId"
                    },
                    {
                        "type": "byte[]",
                        "name": "data"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "batchAllocate",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "poolIds"
                    },
                    {
                        "type": "byte[][]",
                        "name": "datas"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "distribute",
                "args": [
                    {
                        "type": "uint64",
                        "name": "poolId"
                    },
                    {
                        "type": "address[]",
                        "name": "recipientIds"
                    },
                    {
                        "type": "byte[]",
                        "name": "data"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getFeeDenominator",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "isPoolAdmin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "poolId"
                    },
                    {
                        "type": "account",
                        "name": "account"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "isPoolManager",
                "args": [
                    {
                        "type": "uint64",
                        "name": "poolId"
                    },
                    {
                        "type": "account",
                        "name": "account"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "getStrategy",
                "args": [
                    {
                        "type": "uint64",
                        "name": "poolId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getPercentFee",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getBaseFee",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getTreasury",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "getRegistry",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "isCloneableStrategy",
                "args": [
                    {
                        "type": "account",
                        "name": "strategy"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "getPool",
                "args": [
                    {
                        "type": "uint64",
                        "name": "poolId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte[],uint64,string,byte[],byte[])"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}