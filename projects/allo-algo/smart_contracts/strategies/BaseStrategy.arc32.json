{
    "hints": {
        "initializeVariables(address,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getAlloContractId()address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPoolId()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getStrategyId()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPoolAmount()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "isPoolActive()bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "baseStrategy_init(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "increasePoolAmount(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "registerRecipient(byte[],account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "beforeRegisterRecipient(byte[],account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "afterRegisterRecipient(byte[],account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "register_Recipient(byte[],account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "allocate(byte[],account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "beforeAllocate(byte[],account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "afterAllocate(byte[],account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "Allocate(byte[],account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "distribute(address[],byte[],account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "beforeDistribute(address[],byte[],account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "afterDistribute(address[],byte[],account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "Distribute(address[],byte[],account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuc3RyYXRlZ2llcy5iYXNlU3RyYXRlZ3kuQmFzZVN0cmF0ZWd5LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 3
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "alloContractId": {
                    "type": "bytes",
                    "key": "alloContractId"
                },
                "poolActive": {
                    "type": "uint64",
                    "key": "poolActive"
                },
                "poolAmount": {
                    "type": "uint64",
                    "key": "poolAmount"
                },
                "poolId": {
                    "type": "uint64",
                    "key": "poolId"
                },
                "strategyId": {
                    "type": "bytes",
                    "key": "strategyId"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "BaseStrategy",
        "methods": [
            {
                "name": "initializeVariables",
                "args": [
                    {
                        "type": "address",
                        "name": "_alloContractId"
                    },
                    {
                        "type": "string",
                        "name": "_strategyId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getAlloContractId",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "address"
                }
            },
            {
                "name": "getPoolId",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getStrategyId",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "getPoolAmount",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "isPoolActive",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "baseStrategy_init",
                "args": [
                    {
                        "type": "uint64",
                        "name": "_poolId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "increasePoolAmount",
                "args": [
                    {
                        "type": "uint64",
                        "name": "_amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "registerRecipient",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "_data"
                    },
                    {
                        "type": "account",
                        "name": "_sender"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "beforeRegisterRecipient",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "data"
                    },
                    {
                        "type": "account",
                        "name": "sender"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "afterRegisterRecipient",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "data"
                    },
                    {
                        "type": "account",
                        "name": "sender"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "register_Recipient",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "_data"
                    },
                    {
                        "type": "account",
                        "name": "_sender"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "allocate",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "_data"
                    },
                    {
                        "type": "account",
                        "name": "_sender"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "beforeAllocate",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "data"
                    },
                    {
                        "type": "account",
                        "name": "sender"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "afterAllocate",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "data"
                    },
                    {
                        "type": "account",
                        "name": "sender"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "Allocate",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "_data"
                    },
                    {
                        "type": "account",
                        "name": "_sender"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "distribute",
                "args": [
                    {
                        "type": "address[]",
                        "name": "_recipientIds"
                    },
                    {
                        "type": "byte[]",
                        "name": "_data"
                    },
                    {
                        "type": "account",
                        "name": "_sender"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "beforeDistribute",
                "args": [
                    {
                        "type": "address[]",
                        "name": "_recipientIds"
                    },
                    {
                        "type": "byte[]",
                        "name": "_data"
                    },
                    {
                        "type": "account",
                        "name": "sender"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "afterDistribute",
                "args": [
                    {
                        "type": "address[]",
                        "name": "_recipientIds"
                    },
                    {
                        "type": "byte[]",
                        "name": "_data"
                    },
                    {
                        "type": "account",
                        "name": "sender"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "Distribute",
                "args": [
                    {
                        "type": "address[]",
                        "name": "_recipientIds"
                    },
                    {
                        "type": "byte[]",
                        "name": "_data"
                    },
                    {
                        "type": "account",
                        "name": "_sender"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}