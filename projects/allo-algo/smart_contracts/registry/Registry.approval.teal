#pragma version 10

smart_contracts.registry.registry.Registry.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.registry.registry.Registry.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // registry.py:42
    // class Registry(algopy.ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@6
    method "getProfileById(byte[])(byte[],uint256,string,string,address,uint64,address[])"
    method "createAnchor()address"
    txna ApplicationArgs 0
    match __puya_arc4_router___getProfileById_route@2 __puya_arc4_router___createAnchor_route@3
    int 0
    retsub

__puya_arc4_router___getProfileById_route@2:
    // registry.py:49
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // registry.py:42
    // class Registry(algopy.ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // registry.py:49
    // @arc4.abimethod()
    callsub getProfileById
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___createAnchor_route@3:
    // registry.py:53
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub createAnchor
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___bare_routing@6:
    // registry.py:42
    // class Registry(algopy.ARC4Contract):
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@10
    txn ApplicationID
    !
    assert // is creating
    int 1
    retsub

__puya_arc4_router___after_if_else@10:
    // registry.py:42
    // class Registry(algopy.ARC4Contract):
    int 0
    retsub


// smart_contracts.registry.registry.Registry.getProfileById(id: bytes) -> bytes:
getProfileById:
    // registry.py:49-50
    // @arc4.abimethod()
    // def getProfileById(self, id: algopy.Bytes) -> Profile:
    proto 1 1
    // registry.py:51
    // return self.profilesById[id]
    byte "profilesById"
    frame_dig -1
    concat
    box_get
    assert // check self.profilesById entry exists
    retsub


// smart_contracts.registry.registry.Registry.createAnchor() -> bytes:
createAnchor:
    // registry.py:53-54
    // @arc4.abimethod()
    // def createAnchor(self) -> arc4.Address:
    proto 0 1
    // registry.py:55
    // anchor_app = arc4.arc4_create(Anchor,fee=1000000).created_app
    itxn_begin
    int 1
    itxn_field GlobalNumByteSlice
    byte base64 CoEBQw==
    itxn_field ClearStateProgramPages
    byte base64 CiADAAEEJgEFb3duZXIxGEAAA4gA/IgAAUOKAAExG0EAe4IEBIVKUY0EO9fOLAQP2ZhwBCgmsgI2GgCOBAACABQAKgBGIokxGRREMRhENhoBF8AciABTI4kxGRREMRhENhoBF8AcNhoCF4gATSOJMRkURDEYRDYaARfAHDYaAhfAMDYaAxeIAFQjiTEZFEQxGEQ2GgEXwDCIAF0jiTEZQAAGMRgURCOJIomKAQAiKGVEMgMSRCiL/2eJigIAiAARsYv/sgiL/rIHI7IQIrIBs4mKAAAxACIoZUQSRImKAwCI/+6xi/+yEov+shGL/bIUJLIQIrIBs4mKAQCI/9OxMQAishKL/7IRshQkshAisgGziYoAACgyA2eJ
    itxn_field ApprovalProgramPages
    int appl
    itxn_field TypeEnum
    int 1000000
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // registry.py:56
    // return arc4.Address.from_bytes(anchor_app.address.bytes)
    app_params_get AppAddress
    assert // application exists
    retsub


// smart_contracts.registry.registry.Registry.__init__() -> void:
__init__:
    // registry.py:43
    // def __init__(self) -> None:
    proto 0 0
    // registry.py:44
    // self.version = algopy.BigUInt(VERSION)
    byte "version"
    byte 0x01
    app_global_put
    retsub
